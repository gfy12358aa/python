# -*- coding: utf-8 -*-
"""
Created on Sun Mar 22 00:19:01 2020

@author: 爱动脑的小王欣
"""

from manimlib.imports import *

class tree(Scene):
    def construct(self):
        text1=TextMobject("现在有一个连通无向图G=（V，E）")
        text2=TextMobject("我们希望找到他的一颗最小生成树")
        text3=TextMobject("这里我们有两种算法解决这个问题")
        text4=TextMobject("而本段视频我们将讲述prim算法")
        text5=TextMobject("希望大家喜欢")
        text1.set_color=YELLOW
        text1.to_edge(UP)
        text2.to_edge(UP)
        text3.to_edge(UP)
        text4.to_edge(UP)              
        text5.to_edge(UP)
        self.play(Write(text1))
        self.play(ReplacementTransform(text1,text2))

        cir=[]
        for i in range(5):
            c=Circle(color=WHITE)
            cir.append(c)
        cir[0].shift(np.array([-4,0,0]))
        cir[1].shift(np.array([0,0,0]))
        cir[2].shift(np.array([4,0,0]))
        cir[3].shift(np.array([-2,4,0]))
        cir[4].shift(np.array([-2,-4,0]))
        DIR=TextMobject("2","3","1","6","2","2","4","5")
        Line12=Line(np.array([-4,0,0]),np.array([0,0,0]))
        Line14=Line(np.array([-4,0,0]),np.array([-2,4,0]))
        Line15=Line(np.array([-4,0,0]),np.array([-2,-4,0]))
        Line23=Line(np.array([0,0,0]),np.array([4,0,0]))
        Line24=Line(np.array([0,0,0]),np.array([-2,4,0]))
        Line25=Line(np.array([0,0,0]),np.array([-2,-4,0]))
        Line34=Line(np.array([4,0,0]),np.array([-2,4,0]))
        Line35=Line(np.array([4,0,0]),np.array([-2,-4,0]))
        DIR[0].next_to(Line12,DOWN,buff=0.01)
        DIR[1].move_to(UP*2+LEFT*3)
        DIR[2].move_to(DOWN*2+LEFT*3)
        DIR[3].move_to(RIGHT*2)
        DIR[4].move_to(UP*2+LEFT)
        DIR[5].move_to(DOWN*2+LEFT)
        DIR[6].move_to(UP*2+RIGHT)
        DIR[7].move_to(DOWN*2+RIGHT)
        for i in cir:
            #DIR[i].set_color=RED_A
            self.play(FadeIn(i))
        self.play(FadeIn(Line12))
        self.play(FadeIn(Line14))
        self.play(FadeIn(Line15))
        self.play(FadeIn(Line23))
        self.play(FadeIn(Line24))
        self.play(FadeIn(Line25))
        self.play(FadeIn(Line34))
        self.play(FadeIn(Line35))
        for i in DIR:
            self.play(Write(i))
        self.play(ReplacementTransform(text2,text3))
        self.wait(1)

        self.play(ReplacementTransform(text3,text4))
        self.wait(1)
        self.play(ReplacementTransform(text4,text5))
        self.wait(1)
        self.play(FadeOut(text5))
        self.wait(1)                

        text6=TextMobject("Prim算法")
        text6.move_to(UP*7+LEFT*9)
        text6.set_color=YELLOW
        text6.scale(2)
        self.play(Write(text6))
        L=Line(np.array([-8,8,0]),np.array([8,8,0]))
        L.next_to(text6,DOWN,buff=0.5)
        self.play(FadeIn(L))
        self.wait(3)
        text7=TextMobject("设顶点A被任意选为起始点")
        text7.next_to(text6,DOWN,buff=0.8)
        self.play(ReplacementTransform(text6.copy(),text7))

        cir[0].set_color(RED)
        cir[0].set_fill(RED,opacity=1)
        self.wait(5)
        #self.play(ApplyMethod(cir[0].set_color,YELLOW),ApplyMethod(cir[0].set_fill,YELLOW),runtime=2)
        text81=TextMobject("下个顶点为距离A最近的顶点")
        text82=TextMobject("B距A为2，D为3，E为1")
        text83=TextMobject("故E距A最近，因此将AE以高亮表示")
        text81.next_to(text7,DOWN,buff=0.8)
        text82.next_to(text81,DOWN,buff=0.8)
        text83.next_to(text82,DOWN,buff=0.8)  
        self.play(ReplacementTransform(text7.copy(),text81))
        self.play(ReplacementTransform(text81.copy(),text82))
        self.play(ReplacementTransform(text82.copy(),text83))

        cir[4].set_color(RED)
        cir[4].set_fill(RED)
        self.wait(1)
        Line15.set_color(YELLOW)
        self.wait(5)
        text91=TextMobject("下个顶点为距离AE最近的顶点")
        text92=TextMobject("B为2，C为5，D为3")
        text93=TextMobject("故B距AE最近，因此将AB以高亮表示")
        text91.next_to(text83,DOWN,buff=0.8)
        text92.next_to(text91,DOWN,buff=0.8)
        text93.next_to(text92,DOWN,buff=0.8)  
        self.play(ReplacementTransform(text83.copy(),text91))
        self.play(ReplacementTransform(text91.copy(),text92))
        self.play(ReplacementTransform(text92.copy(),text93))
        cir[1].set_color(RED)
        cir[1].set_fill(RED)
        self.wait(1)
        Line12.set_color(YELLOW)
        self.wait(5)
        text10=TextMobject("重复上面的步骤。直到所有的点均高亮表示")
        cir[3].set_color(RED)
        text10.next_to(text93,DOWN,buff=0.8)      
        self.play(ReplacementTransform(text93.copy(),text10))

        cir[3].set_fill(RED)
        self.wait(1)
        Line24.set_color(YELLOW)
        self.wait(5)

        text11=TextMobject("这就是这个图的最小生成树")
        text11.next_to(text10,DOWN,buff=0.8)
        self.play(ReplacementTransform(text10.copy(),text11))

        cir[2].set_color(RED)
        cir[2].set_fill(RED)
        self.wait(1)
        Line34.set_color(YELLOW)
        self.wait(5)

        text12=TextMobject("最后，感谢大家收看")
        self.wait(4)


class krutree(Scene):
    def construct(self):
        text1=TextMobject("现在有一个连通无向图G=（V，E）")
        text2=TextMobject("我们希望找到他的一颗最小生成树")
        text3=TextMobject("这里我们有两种算法解决这个问题")
        text4=TextMobject("而本段视频我们将讲述kruskal算法")
        text5=TextMobject("kruskal是在给定图的节点中，每次加入到最小生成树的安全边永远是权重最小的连接两个不同分量的边")
        text1.to_edge(UP)
        text2.to_edge(UP)
        text3.to_edge(UP)
        text4.to_edge(UP)              
        text5.to_edge(UP)
        self.play(Write(text1))
        self.play(ReplacementTransform(text1,text2))

        cir=[]
        for i in range(9):
            c=Circle(color=WHITE)
            cir.append(c)
        cir[0].shift(np.array([-2,0,0]))
        cir[1].shift(np.array([0,4,0]))
        cir[2].shift(np.array([4,4,0]))
        cir[3].shift(np.array([8,4,0]))
        cir[4].shift(np.array([12,0,0]))
        cir[5].shift(np.array([8,-4,0]))
        cir[6].shift(np.array([4,-4,0]))
        cir[7].shift(np.array([0,-4,0]))
        cir[8].shift(np.array([2,0,0]))
        DIR=TextMobject("4","8","8","11","7","4","2","9","14","10","2","1","6","7")
        Line12=Line(np.array([-2,0,0]),np.array([0,4,0]))
        Line18=Line(np.array([-2,0,0]),np.array([0,-4,0]))
        Line23=Line(np.array([0,4,0]),np.array([4,4,0]))
        Line28=Line(np.array([0,4,0]),np.array([0,-4,0]))
        Line34=Line(np.array([4,4,0]),np.array([8,4,0]))
        Line37=Line(np.array([4,4,0]),np.array([4,-4,0]))
        Line39=Line(np.array([4,4,0]),np.array([2,0,0]))
        Line45=Line(np.array([8,4,0]),np.array([12,0,0]))
        Line46=Line(np.array([8,4,0]),np.array([8,-4,0]))
        Line56=Line(np.array([12,0,0]),np.array([8,-4,0]))
        Line67=Line(np.array([8,-4,0]),np.array([4,-4,0]))
        Line78=Line(np.array([4,-4,0]),np.array([0,-4,0]))
        Line79=Line(np.array([4,-4,0]),np.array([2,0,0]))
        Line89=Line(np.array([0,-4,0]),np.array([2,0,0]))
        DIR[0].move_to(UP*2+LEFT*1)
        DIR[1].move_to(DOWN*2+LEFT*1)
        DIR[2].move_to(UP*4+RIGHT*2)
        DIR[3].move_to(UP*0+RIGHT*0)
        DIR[4].move_to(UP*4+RIGHT*6)
        DIR[5].move_to(UP*3+RIGHT*3)
        DIR[6].move_to(UP*2+RIGHT*10)
        DIR[7].move_to(RIGHT*8)
        DIR[8].move_to(DOWN*2+RIGHT*10)
        DIR[9].move_to(DOWN*4+RIGHT*6)
        DIR[10].move_to(DOWN*4+RIGHT*2)
        DIR[11].move_to(DOWN*3+RIGHT*3)
        DIR[12].move_to(DOWN*3+RIGHT*1)
        DIR[13].move_to(RIGHT*4)


        for i in cir:
            #DIR[i].set_color=RED_A
            self.play(FadeIn(i))
        self.play(FadeIn(Line12))
        self.play(FadeIn(Line18))
        self.play(FadeIn(Line23))
        self.play(FadeIn(Line28))
        self.play(FadeIn(Line34))
        self.play(FadeIn(Line37))
        self.play(FadeIn(Line39))
        self.play(FadeIn(Line45))
        self.play(FadeIn(Line46))
        self.play(FadeIn(Line56))
        self.play(FadeIn(Line67))
        self.play(FadeIn(Line78))
        self.play(FadeIn(Line79))
        self.play(FadeIn(Line89))
        for i in DIR:
            i.scale(1.5)
            self.play(Write(i))
        self.play(ReplacementTransform(text2,text3))
        self.wait(1)

        self.play(ReplacementTransform(text3,text4))
        self.wait(1)
        self.play(ReplacementTransform(text4,text5))
        self.wait(1)
        self.play(FadeOut(text5))
        self.wait(1)                

        text6=TextMobject("kruskal算法")
        text6.move_to(UP*7+LEFT*9)
        text6.scale(2)
        L=Line(np.array([-8,8,0]),np.array([8,8,0]))
        L.next_to(text6,DOWN,buff=0.5)
        
        text7=TexMobject("那么我们就来实际操练下吧")
        text7.next_to(text6,DOWN,buff=1)
        text8=TextMobject("首先我们选取距离最短的边GI作为初始边")
        text8.next_to(text6,DOWN,buff=2)
        self.play(Write(text6))

        self.play(FadeIn(L))
        self.play(ReplacementTransform(text6.copy(),text7))
        self.play(ReplacementTransform(text7.copy(),text8))
        cir[6].set_color(RED)
        cir[8].set_color(RED)
        cir[6].set_fill(RED,opacity=1)
        cir[8].set_fill(RED,opacity=1)
        self.wait(1)
        Line79.set_color(YELLOW)
        self.wait(5)
        text9=TextMobject("然后选取第二短的安全边GH")
        text9.next_to(text8,DOWN,buff=0.8)
        self.play(ReplacementTransform(text8.copy(),text9))

        cir[7].set_color(RED)
        cir[7].set_fill(RED,opacity=1)
        Line78.set_color(YELLOW)
        self.wait(5)

        text10=TextMobject("重复上面的步骤。直到所有的点均高亮表示")
        cir[3].set_color(RED)
        text10.next_to(text9,DOWN,buff=0.8)      
        self.play(ReplacementTransform(text9.copy(),text10))

        cir[3].set_fill(RED,opacity=1)
        cir[4].set_fill(RED,opacity=1)
        self.wait(1)
        Line45.set_color(YELLOW)
        self.wait(5)
        
        cir[0].set_color(RED)
        cir[1].set_color(RED)
        cir[0].set_fill(RED,opacity=1)
        cir[1].set_fill(RED,opacity=1)
        self.wait(1)
        Line12.set_color(YELLOW)
        self.wait(5)

        cir[2].set_color(RED)
        cir[8].set_color(RED)
        cir[2].set_fill(RED,opacity=1)
        cir[8].set_fill(RED,opacity=1)
        self.wait(1)
        Line39.set_color(YELLOW)
        self.wait(5)

        Line34.set_color(YELLOW)
        self.wait(5)
        Line37.set_color(YELLOW)
        self.wait(5)

        
        
        text11=TextMobject("等等，是不是做错了")
        text11.next_to(text10,DOWN,buff=0.8)      
        text12=TextMobject("5","4","3","2","1")
        for i in range(5):        
            text12[i].next_to(text11,DOWN,buff=0.8)   
        self.play(ReplacementTransform(text11.copy(),text12[0]))
        for i in range(4):        
            text12[i].scale(1.5)
            self.play(ReplacementTransform(text12[i],text12[i+1]))
        self.wait(1)
        text13=TextMobject("你发现问题了吗")  

        text13.next_to(text11,DOWN,buff=0.8)      
        text14=TextMobject("Krustras算法过程中是不能出现环的","所以我们回退回去，跳过这条边")
        text14[0].next_to(text13,DOWN,buff=0.8) 
        text14[1].next_to(text14[0],DOWN,buff=0.8) 
        self.play(ReplacementTransform(text12[4],text13))
        self.play(ReplacementTransform(text13.copy(),text14))

        Line37.set_color(WHITE)
        self.wait(5)
        Line23.set_color(YELLOW)
        self.wait(5)
        cir[3].set_color(RED)
        cir[5].set_fill(RED,opacity=1)
        Line46.set_color(YELLOW)

        



       
        text15=TextMobject("这就是这个图的最小生成树")
        text15.next_to(text14[1],DOWN,buff=0.3)
        self.play(ReplacementTransform(text14.copy(),text15))
        self.play(FadeOut(Line18))
        self.play(FadeOut(Line28))
        self.play(FadeOut(Line37))
        self.play(FadeOut(Line56))
        self.play(FadeOut(Line67))
        self.play(FadeOut(Line89))
        self.play(FadeOut(DIR[3]))
        self.play(FadeOut(DIR[4]))
        self.play(FadeOut(DIR[1]))
        self.play(FadeOut(DIR[12]))
        self.play(FadeOut(DIR[8]))
        self.play(FadeOut(DIR[9]))
        self.wait(4)
        self.clear()
        text16=TextMobject("最后，感谢大家收看")
        self.play(Write(text16))


